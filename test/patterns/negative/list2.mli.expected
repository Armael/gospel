
*******************************
********** Parsed file ********
*******************************
val f : 'a list option -> int[@@gospel
                               {| r = f l
    requires match l with
      | None -> false
      | Some (x :: _ as a) -> false
|}]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Stdlib *)

(*@ open Gospelstdlib *)

val f : 'a list option -> int
(*@ r = f l
    requires ...
     *)
File "list2.mli", line 3, characters 13-83:
Error: This pattern-matching is not exhaustive.
       Here is an example of a case that is not matched:
         Some [].
