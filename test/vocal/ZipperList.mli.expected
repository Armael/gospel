
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text " Zippers for lists "]
type 'a t[@@gospel
           {| model seq: 'a seq
    model idx: integer
    invariant 0 <= idx <= Seq.length seq |}]
val empty : unit -> 'a t[@@gospel
                          {| z = empty ()
    ensures z.seq = Seq.empty
    ensures z.idx = 0 |}]
val is_empty : 'a t -> bool[@@gospel
                             {| b = is_empty z
    ensures b <-> z.seq = Seq.empty |}]
val length : 'a t -> int[@@gospel
                          {| r = length z
    ensures r = Seq.length z.seq |}]
val to_list : 'a t -> 'a list[@@gospel
                               {| l = to_list z
    ensures z.seq = l |}]
val make : 'a list -> 'a t[@@gospel
                            {| z = make l
    ensures z.seq = l
    ensures z.idx = 0 |}]
val move_left : 'a t -> 'a t[@@gospel
                              {| r = move_left z
    requires 0 < z.idx
    ensures  r.seq = z.seq
    ensures  r.idx = z.idx - 1 |}]
val insert_left : 'a -> 'a t -> 'a t[@@gospel
                                      {| r = insert_left x z
    ensures  r.seq = Seq.snoc z.seq[.. z.idx] x ++ z.seq[z.idx ..]
    ensures  r.idx = z.idx + 1 |}]
val remove_left : 'a t -> 'a t[@@gospel
                                {| r = remove_left z
    requires 0 < z.idx
    ensures  r.seq = z.seq[.. z.idx - 1] ++ z.seq[z.idx ..]
    ensures  r.idx = z.idx - 1|}]
val move_all_left : 'a t -> 'a t[@@gospel
                                  {| r = move_all_left z
      ensures r.seq = z.seq
      ensures r.idx = 0 |}]
val move_right : 'a t -> 'a t[@@gospel
                               {| r = move_right z
    requires z.idx < Seq.length z.seq
    ensures  r.seq = z.seq
    ensures  r.idx = z.idx + 1 |}]
val insert_right : 'a -> 'a t -> 'a t[@@gospel
                                       {| r = insert_right x z
    ensures  r.seq = z.seq[.. z.idx] ++ Seq.cons x z.seq[z.idx ..]
    ensures  r.idx = z.idx |}]
val remove_right : 'a t -> 'a t[@@gospel
                                 {| r = remove_right z
    requires z.idx < Seq.length z.seq
    ensures  r.seq = z.seq[.. z.idx] ++ z.seq[z.idx + 1 ..]
    ensures  r.idx = z.idx |}]
val move_all_right : 'a t -> 'a t[@@gospel
                                   {| r = move_all_right z
    ensures r.seq = z.seq
    ensures r.idx = Seq.length z.seq |}]
val is_focused : 'a t -> bool[@@gospel
                               {| b = is_focused z
    ensures b <-> z.idx < Seq.length z.seq |}]
val focused : 'a t -> 'a option[@@gospel
                                 {| r = focused z
    ensures match r with
            | None   -> z.idx = Seq.length z.seq
            | Some x -> z.idx < Seq.length z.seq /\ x = z.seq[z.idx] |}]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text " Zippers for lists "]

type 'a t
  (*@ model ...
      model ...
      invariant ...
       *)

val empty : unit -> 'a t
(*@ z = empty ()
    ensures ...
    ensures ...
     *)

val is_empty : 'a t -> bool
(*@ b = is_empty z
    ensures ...
     *)

val length : 'a t -> int
(*@ r = length z
    ensures ...
     *)

val to_list : 'a t -> 'a list
(*@ l = to_list z
    ensures ...
     *)

val make : 'a list -> 'a t
(*@ z = make l
    ensures ...
    ensures ...
     *)

val move_left : 'a t -> 'a t
(*@ r = move_left z
    requires ...
    ensures ...
    ensures ...
     *)

val insert_left : 'a -> 'a t -> 'a t
(*@ r = insert_left x z
    ensures ...
    ensures ...
     *)

val remove_left : 'a t -> 'a t
(*@ r = remove_left z
    requires ...
    ensures ...
    ensures ...
     *)

val move_all_left : 'a t -> 'a t
(*@ r = move_all_left z
    ensures ...
    ensures ...
     *)

val move_right : 'a t -> 'a t
(*@ r = move_right z
    requires ...
    ensures ...
    ensures ...
     *)

val insert_right : 'a -> 'a t -> 'a t
(*@ r = insert_right x z
    ensures ...
    ensures ...
     *)

val remove_right : 'a t -> 'a t
(*@ r = remove_right z
    requires ...
    ensures ...
    ensures ...
     *)

val move_all_right : 'a t -> 'a t
(*@ r = move_all_right z
    ensures ...
    ensures ...
     *)

val is_focused : 'a t -> bool
(*@ b = is_focused z
    ensures ...
     *)

val focused : 'a t -> 'a option
(*@ r = focused z
    ensures ...
     *)

*******************************
********* Typed GOSPEL ********
*******************************
module ZipperList.mli

  Namespace: ZipperList.mli
    Type symbols
      ('a) t
      
    Logic Symbols
      
    Field Symbols
      function idx (_:'a t) : integer
      function seq (_:'a t) : 'a seq_1
      
    Exception Symbols
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    [@@@ocaml.text " Zippers for lists "]
    
    type 'a t
         (*@ 
             model seq : 'a seq_1
             model idx : integer
             invariant (0:integer <= (idx_1 ):integer):prop /\ ((idx_1 ):
                       integer <= (length  (seq_2 ):'a39 seq_1):integer):prop *)
    
    val empty : unit -> 'a t
    (*@ z:'a t = empty ()
        ensures ((z:'a t).seq = (empty_1 ):'a seq_1):prop
                ensures ((z:'a t).idx = 0:integer):prop*)
    
    val is_empty : 'a t -> bool
    (*@ b:bool = is_empty z_1:'a t
        ensures (b:bool = (True ):bool):prop <-> ((z_1:'a t).seq = (empty_1 ):'a 
                seq_1):prop*)
    
    val length_1 : 'a t -> int
    (*@ r:int = length_1 z_2:'a t
        ensures ((integer_of_int  r:int):integer = (length 
                (z_2:'a t).seq):integer):prop*)
    
    val to_list : 'a t -> 'a list
    (*@ l:'a list = to_list z_3:'a t
        ensures ((z_3:'a t).seq = (to_seq  l:'a list):'a seq_1):prop*)
    
    val make : 'a list -> 'a t
    (*@ z_4:'a t = make l_1:'a list
        ensures ((z_4:'a t).seq = (to_seq  l_1:'a list):'a seq_1):prop
                ensures ((z_4:'a t).idx = 0:integer):prop*)
    
    val move_left : 'a t -> 'a t
    (*@ r_1:'a t = move_left z_5:'a t
        requires (0:integer < (z_5:'a t).idx):prop
        ensures ((r_1:'a t).seq = (z_5:'a t).seq):prop
                ensures ((r_1:'a t).idx = ((z_5:'a t).idx - 1:integer):
                        integer):prop*)
    
    val insert_left : 'a -> 'a t -> 'a t
    (*@ r_2:'a t = insert_left x:'a z_6:'a t
        ensures ((r_2:'a t).seq = ((snoc 
                (mixfix [.._]  (z_6:'a t).seq (z_6:'a t).idx):'a seq_1 x:'a):'a 
                seq_1 ++ (mixfix [_..] 
                (z_6:'a t).seq (z_6:'a t).idx):'a seq_1):'a seq_1):prop
                ensures ((r_2:'a t).idx = ((z_6:'a t).idx + 1:integer):
                        integer):prop*)
    
    val remove_left : 'a t -> 'a t
    (*@ r_3:'a t = remove_left z_7:'a t
        requires (0:integer < (z_7:'a t).idx):prop
        ensures ((r_3:'a t).seq = ((mixfix [.._] 
                (z_7:'a t).seq ((z_7:'a t).idx - 1:integer):integer):'a 
                seq_1 ++ (mixfix [_..] 
                (z_7:'a t).seq (z_7:'a t).idx):'a seq_1):'a seq_1):prop
                ensures ((r_3:'a t).idx = ((z_7:'a t).idx - 1:integer):
                        integer):prop*)
    
    val move_all_left : 'a t -> 'a t
    (*@ r_4:'a t = move_all_left z_8:'a t
        ensures ((r_4:'a t).seq = (z_8:'a t).seq):prop
                ensures ((r_4:'a t).idx = 0:integer):prop*)
    
    val move_right : 'a t -> 'a t
    (*@ r_5:'a t = move_right z_9:'a t
        requires ((z_9:'a t).idx < (length  (z_9:'a t).seq):integer):prop
        ensures ((r_5:'a t).seq = (z_9:'a t).seq):prop
                ensures ((r_5:'a t).idx = ((z_9:'a t).idx + 1:integer):
                        integer):prop*)
    
    val insert_right : 'a -> 'a t -> 'a t
    (*@ r_6:'a t = insert_right x_1:'a z_10:'a t
        ensures ((r_6:'a t).seq = ((mixfix [.._] 
                (z_10:'a t).seq (z_10:'a t).idx):'a seq_1 ++ (cons 
                x_1:'a (mixfix [_..] 
                (z_10:'a t).seq (z_10:'a t).idx):'a seq_1):'a seq_1):'a 
                seq_1):prop
                ensures ((r_6:'a t).idx = (z_10:'a t).idx):prop*)
    
    val remove_right : 'a t -> 'a t
    (*@ r_7:'a t = remove_right z_11:'a t
        requires ((z_11:'a t).idx < (length  (z_11:'a t).seq):integer):prop
        ensures ((r_7:'a t).seq = ((mixfix [.._] 
                (z_11:'a t).seq (z_11:'a t).idx):'a seq_1 ++ (mixfix [_..] 
                (z_11:'a t).seq ((z_11:'a t).idx + 1:integer):integer):'a 
                seq_1):'a seq_1):prop
                ensures ((r_7:'a t).idx = (z_11:'a t).idx):prop*)
    
    val move_all_right : 'a t -> 'a t
    (*@ r_8:'a t = move_all_right z_12:'a t
        ensures ((r_8:'a t).seq = (z_12:'a t).seq):prop
                ensures ((r_8:'a t).idx = (length 
                        (z_12:'a t).seq):integer):prop*)
    
    val is_focused : 'a t -> bool
    (*@ b_1:bool = is_focused z_13:'a t
        ensures (b_1:bool = (True ):bool):prop <-> ((z_13:'a t).idx < (length 
                (z_13:'a t).seq):integer):prop*)
    
    val focused : 'a t -> 'a option
    (*@ r_9:'a option = focused z_14:'a t
        ensures (match r_9:'a option with
                | None -> if ((z_14:'a t).idx = (length 
                          (z_14:'a t).seq):integer):prop then (True ):
                          bool else (False ):bool
                | Some x_2:'a -> if ((z_14:'a t).idx < (length 
                                 (z_14:'a t).seq):integer):prop /\ (x_2:'a = (mixfix [_] 
                                 (z_14:'a t).seq (z_14:'a t).idx):'a):prop then (True ):
                                 bool else (False ):bool
                end::bool = (True ):bool):prop*)

OK
