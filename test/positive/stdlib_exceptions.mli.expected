
*******************************
********** Parsed file ********
*******************************
val hd : 'a list -> 'a[@@gospel
                        {| x = hd l
      raises Failure _ -> l = [] |}]
val find : ('a -> bool) -> 'a list -> 'a[@@gospel
                                          {| r = find f l
      raises Not_found -> forall x. List.mem x l -> not f x |}]
val invalid_arg : string -> 'a[@@gospel
                                {| raises  Invalid_argument _ -> true
    ensures false |}]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

val hd : 'a list -> 'a
(*@ x = hd l
    with ...
     *)

val find : ('a -> bool) -> 'a list -> 'a
(*@ r = find f l
    with ...
     *)

val invalid_arg : string -> 'a
(*@ ensures ...
    with ...
     *)

*******************************
********* Typed GOSPEL ********
*******************************
module stdlib_exceptions.mli

  Namespace: stdlib_exceptions.mli
    Type symbols
      
    Logic Symbols
      
    Field Symbols
      
    Exception Symbols
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    val hd : 'a list -> 'a
    (*@ x:'a = hd l:'a list
        raisesFailure _ -> (l:'a list = ([] ):'a list):prop*)
    
    val find : ('a -> bool) -> 'a list -> 'a
    (*@ r:'a = find f:'a -> bool l_1:'a list
        raisesNot_found  -> forall x_1:'a. (mem 
                            x_1:'a l_1:'a list):prop -> not ((apply 
                            f:'a -> bool x_1:'a):bool = (True ):bool):prop*)
    
    val invalid_arg : string -> 'a
    (*@ result:'a = invalid_arg $x0:string
        ensures false:prop
        raisesInvalid_argument _ -> true:prop*)

OK
