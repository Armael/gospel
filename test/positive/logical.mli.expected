
*******************************
********** Parsed file ********
*******************************
[@@@gospel {| function powm (x y m: integer) : integer = mod (pow x y) m |}]
[@@@gospel
  {| predicate is_sorted (a: int array) =
      forall i j. 0 <= i <= j < Array.length a
                  -> a.(i) <= a.(j) |}]
val merge : int array -> int array -> int array[@@gospel
                                                 {| c = merge a b
    requires is_sorted a
    requires is_sorted b
    ensures is_sorted c |}]
[@@@gospel
  {| predicate rec is_sorted_list (l: int list) = match l with
      | [] | _ :: [] -> true
      | h :: (y :: _ as t) -> h <= y /\ is_sorted_list t |}]
[@@@gospel
  {| function rec fibonacci (n: integer) : integer =
      if n <= 1 then n else fibonacci (n-2) + fibonacci (n-1) |}
  [@@gospel {| requires n >= 0
    variant n
    ensures result >= 0 |}]]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Stdlib *)

(*@ open Gospelstdlib *)

(*@ function powm ... *)

(*@ predicate is_sorted ... *)

val merge : int array -> int array -> int array
(*@ c = merge a b
    requires ...
    requires ...
    ensures ...
     *)

(*@ predicate rec is_sorted_list ... *)

(*@ function rec fibonacci ...
    variant ...
    requires ...
    ensures ...
     *)

*******************************
********* Typed GOSPEL ********
*******************************
module logical.mli

  Namespace: logical.mli
    Type symbols
      
    Logic Symbols
      function fibonacci (_:integer) : integer
      predicate is_sorted (_:int array)
      predicate is_sorted_list (_:int list)
      function powm (_:integer) (_:integer) (_:integer) : integer
      
    Field Symbols
      
    Exception Symbols
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Stdlib *)
    
    (*@ open Gospelstdlib *)
    
    (*@ function powm (x:integer) (y:integer) (m:integer): integer =
        (mod  (pow  x:integer y:integer):integer m:integer):integer
    *)
    
    (*@ predicate is_sorted (a_1:int array) =
        forall i:integer j:integer. (0:integer <= i:integer):prop /\ (
        i:integer <= j:integer):prop /\ (j:integer < (length 
        a_1:int array):integer):prop -> ((integer_of_int 
        (get  a_1:int array i:integer):int):integer <= (integer_of_int 
        (get  a_1:int array j:integer):int):integer):prop
    *)
    
    val merge : int array -> int array -> int array
    (*@ c:int array = merge a_2:int array b:int array
        requires (is_sorted  a_2:int array):prop
                 requires (is_sorted  b:int array):prop
        ensures (is_sorted  c:int array):prop*)
    
    (*@ predicate rec is_sorted_list (l:int list) =
        (match l:int list with
        | [] | infix :: _ [] -> (True ):bool
        | infix :: h:int (infix :: y_1:int _ as t:int list) -> if ((integer_of_int 
                                                               h:int):
                                                               integer <= (integer_of_int 
                                                               y_1:int):
                                                               integer):prop /\ (is_sorted_list 
                                                               t:int list):prop then (True ):
                                                               bool else (False ):
                                                               bool
        end::bool = (True ):bool):prop
    *)
    
    (*@ function rec fibonacci (n:integer): integer =
        if (n:integer <= 1:integer):prop then n:integer else ((fibonacci 
        (n:integer - 2:integer):integer):integer + (fibonacci 
        (n:integer - 1:integer):integer):integer):integer
        variant n:integer
        requires (n:integer >= 0:integer):prop
        ensures (result:integer >= 0:integer):prop
    *)

OK
