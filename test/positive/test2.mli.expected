
*******************************
********** Parsed file ********
*******************************
module type TA  =
  sig type 'a t type 'b t2 [@@@gospel {| function f (x: 'a t) : float |}] end
module B : functor (A : TA) -> sig type 'a t = 'a A.t end
type t
type int

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Stdlib *)

(*@ open Gospelstdlib *)

module type TA  = sig type 'a t
                        type 'b t2
                        (*@ function f ... *) end

module B : functor (A : TA) -> sig type 'a t = 'a A.t
                                      end

type t
  

type int
  

*******************************
********* Typed GOSPEL ********
*******************************
module test2.mli

  Namespace: test2.mli
    Type symbols
       int_1
       t
      
    Logic Symbols
      
    Field Symbols
      
    Exception Symbols
      
    Namespaces
      Namespace: B
        Type symbols
          ('a) t_1 [='a t_2]
          
        Logic Symbols
          
        Field Symbols
          
        Exception Symbols
          
        Namespaces
          
        Type Namespaces
          
      
    Type Namespaces
      Namespace: TA
        Type symbols
          ('a) t_2
          ('b) t2
          
        Logic Symbols
          function f (_:'a t_2) : float
          
        Field Symbols
          
        Exception Symbols
          
        Namespaces
          
        Type Namespaces
          
      
  Signatures
    (*@ open Stdlib *)
    
    (*@ open Gospelstdlib *)
    
    module type TA  =
      sig
        type 'a t_2
             
        type 'b t2
             
        (*@ function f (x:'a t_2): float *)
      end
    
    module B : functor (A : TA) -> sig
                                     type 'a t_1 = 'a t_2
                                          
                                   end
    
    type t
         
    
    type int_1
         

OK
