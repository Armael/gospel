
*******************************
********** Parsed file ********
*******************************
val f : int -> (int * int)[@@gospel {| pure |}]
val f : int -> (int * int * int)[@@gospel {| pure |}]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

val f : int -> (int * int)
(*@  *)

val f : int -> (int * int * int)
(*@  *)

*******************************
********* Typed GOSPEL ********
*******************************
module tuple_result.mli

  Namespace: tuple_result.mli
    Type symbols
      
    Logic Symbols
      function f (_:int) : int * int * int
      
    Field Symbols
      
    Exception Symbols
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    val f_1 : int -> (int * int)
    (*@ result0:int, result1:int = f_1 __arg0:int*)
    
    val f : int -> (int * int * int)
    (*@ result0_1:int, result1_1:int, result2:int = f __arg0_1:int*)

OK
